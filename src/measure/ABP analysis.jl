
# PURPOSE: Calculate the packing fraction of particles at the equators or poles
# METHOD: Absolute angle is calculated w.r.t centre of the ellipse
# INPUT: data from a file generated by ABP file.jl 
# OUTPUT: Plot of packing fractions and a file of number of particles at equators and poles
using  Plots, LaTeXStrings, Statistics, CSV, DataFrames,CategoricalArrays

gr()

function stat_analysis1(a,b,R,pathf)
  f= pathf*".csv"
  f1= pathf*"_p.csv"
  f2= pathf*"_pf.png"
  df= CSV.read(f, DataFrame)
  #steps= df[!, :N]
  time= df[!,:Time]
  #x= df[!,:xpos]
  #y= df[!,:ypos]
  df[!,:Time] = categorical(df[!,:Time],compress=true) # it sorts out time step data 
  ## Group dataframe by values in categorical column
  gdf = groupby(df,:Time,sort=true) # only 1000 data groups because I have omitted 100 time steps means 1 s
  
  n1=[]
  n2=[]
t1=plot();
t2=plot();
count1=0 
count2=0 
count=0
dt= 1#1e-2
i= (time/dt)
eθ = atan(b/a)   # angle at which area will be same
pf_factor = R*R
Aeq= a*b*(atan(a*tan(eθ)/b))  # equator area
Ap= a*b*(atan(b/(tan(eθ)*a)))   # pole area

for i=1:length(gdf)      # length(gdf) is total time or steps, i is actually time steps but in group counting it is 1, 2, 3---1000 , hence, time                                                                                                                                                                                                                     
   global count1=0 
   global  count2=0 
   
    for j=1:length(gdf[i][!,:xpos]) 
    
        θ = atan.(gdf[i][!,:ypos][j], gdf[i][!,:xpos][j]) 

        if θ.>= (π-eθ)  && θ.<= π                      #equator 2                                                                                                                                                                                          
           global  count1 =count1+1  
    
        elseif θ.>= -π  && θ.<= -(π-eθ)               #equator 2  
            global count1 =count1+1  

        elseif θ.>= -eθ  &&  θ.<= eθ              #equator 1                                                                                                                                                                                                 
              global   count1 =count1+1  
                
                elseif θ.>= eθ && θ.<= (π-eθ)        #pole 1
              global  count2 =count2+1 
                elseif θ.>= -(π-eθ)   && θ.<= - eθ      #pole 2
                global    count2 =count2+1 
    end   
    
    end
    push!(n1,count1)
    push!(n2,count2)
    println("$count1, $count2, $i") 
    
    pfe = count1*(0.5*π/Aeq)*pf_factor 
    pfp = count2*(0.5*π/Ap)*pf_factor 
  
    #########################################################################################
    # ploting in terms of particles number
     #=
    scatter!(t1,[i],[count1], ylimit=(0,count1+count2+10),legend=false) 
    xlabel!("Time (s)", xguidefont=font(16), xtickfont=font(11))
    plot!(ylabel=L"\mathrm{N_{eqs}}",yguidefont=font(16), ytickfont=font(11))
    title!(" Equators ")

    scatter!(t2,[i],[count2], ylimit=(0,count1+count2+10),legend=false) 
    title!(" Poles ")
    xlabel!("Time (s)",xguidefont=font(16), xtickfont=font(11))
    plot!(ylabel=L"\mathrm{N_{poles}}",yguidefont=font(16), ytickfont=font(11))
    count= count1+count2
  end
  plot(t1, t2)
  savefig("data_ellipse_N1.png")
    =# 
    #########################################################################################
    # ploting in terms of packing fraction

    
    scatter!(t1,[i],[pfe], ylimit=(0,0.3),legend=false) 
    xlabel!("Time (s)", xguidefont=font(16), xtickfont=font(11))
    plot!(ylabel=L"\mathrm{pf_{eqs}}",yguidefont=font(16), ytickfont=font(11))
    title!(" Equators ")
    
    scatter!(t2,[i],[pfp], ylimit=(0,0.3),legend=false) 
    xlabel!("Time (s)", xguidefont=font(16), xtickfont=font(11))
    plot!(ylabel=L"\mathrm{pf_{poles}}",yguidefont=font(16), ytickfont=font(11))
    title!(" Poles ")
    count= count1+count2
    end
plot(t1, t2)
savefig(f2)
   
############################################################################################################
#file wriiting
    touch(f1)

    efg = open(f1, "w")
    #creating DataFrame for number of particles at equators n1, and at poles n2
    data = DataFrame(p1 = n1,
     p2 = n2) 

    CSV.write(f1, data)
    
   
    println("I am in ABP analysis")
 return count
end